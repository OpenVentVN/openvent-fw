/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: openvent.proto */

#ifndef PROTOBUF_C_openvent_2eproto__INCLUDED
#define PROTOBUF_C_openvent_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DeviceInfo DeviceInfo;
typedef struct _FileData FileData;
typedef struct _VentData VentData;
typedef struct _VentRequest VentRequest;
typedef struct _VentResponse VentResponse;


/* --- enums --- */

typedef enum _Transport {
  TRANSPORT__TransportUnknown = 0,
  TRANSPORT__TransportBLE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSPORT)
} Transport;
typedef enum _Status {
  STATUS__Unknown = 0,
  STATUS__Success = 1,
  STATUS__Fail = 2,
  STATUS__InvalidAccessKey = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STATUS)
} Status;
typedef enum _Command {
  COMMAND__CmdNone = 0,
  COMMAND__DeviceInfoRequest = 1,
  COMMAND__VentDataRequest = 2,
  COMMAND__CheckFirmwareRequest = 3,
  COMMAND__WriteFirmwareRequest = 4,
  COMMAND__ReadFirmwareRequest = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMMAND)
} Command;

/* --- messages --- */

struct  _DeviceInfo
{
  ProtobufCMessage base;
  char *fw_version;
  char *hw_version;
  uint32_t device_model;
  char *device_name;
};
#define DEVICE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  _FileData
{
  ProtobufCMessage base;
  char *file_name;
  uint32_t file_size;
  uint32_t offset;
  uint32_t checksum;
  ProtobufCBinaryData data;
};
#define FILE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file_data__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, {0,NULL} }


struct  _VentData
{
  ProtobufCMessage base;
  uint32_t breath_circulating_volumn;
  uint32_t breathing_frequency;
  double breath_in_time;
  uint32_t timestamp;
};
#define VENT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vent_data__descriptor) \
    , 0, 0, 0, 0 }


struct  _VentRequest
{
  ProtobufCMessage base;
  Command cmd;
  char *access_key;
  FileData *read_firmware_request;
  FileData *write_firmware_request;
};
#define VENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vent_request__descriptor) \
    , COMMAND__CmdNone, (char *)protobuf_c_empty_string, NULL, NULL }


struct  _VentResponse
{
  ProtobufCMessage base;
  Status status;
  DeviceInfo *device_info_response;
  FileData *read_firmware_response;
  size_t n_vent_data_response;
  VentData **vent_data_response;
};
#define VENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vent_response__descriptor) \
    , STATUS__Unknown, NULL, NULL, 0,NULL }


/* DeviceInfo methods */
void   device_info__init
                     (DeviceInfo         *message);
size_t device_info__get_packed_size
                     (const DeviceInfo   *message);
size_t device_info__pack
                     (const DeviceInfo   *message,
                      uint8_t             *out);
size_t device_info__pack_to_buffer
                     (const DeviceInfo   *message,
                      ProtobufCBuffer     *buffer);
DeviceInfo *
       device_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_info__free_unpacked
                     (DeviceInfo *message,
                      ProtobufCAllocator *allocator);
/* FileData methods */
void   file_data__init
                     (FileData         *message);
size_t file_data__get_packed_size
                     (const FileData   *message);
size_t file_data__pack
                     (const FileData   *message,
                      uint8_t             *out);
size_t file_data__pack_to_buffer
                     (const FileData   *message,
                      ProtobufCBuffer     *buffer);
FileData *
       file_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file_data__free_unpacked
                     (FileData *message,
                      ProtobufCAllocator *allocator);
/* VentData methods */
void   vent_data__init
                     (VentData         *message);
size_t vent_data__get_packed_size
                     (const VentData   *message);
size_t vent_data__pack
                     (const VentData   *message,
                      uint8_t             *out);
size_t vent_data__pack_to_buffer
                     (const VentData   *message,
                      ProtobufCBuffer     *buffer);
VentData *
       vent_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vent_data__free_unpacked
                     (VentData *message,
                      ProtobufCAllocator *allocator);
/* VentRequest methods */
void   vent_request__init
                     (VentRequest         *message);
size_t vent_request__get_packed_size
                     (const VentRequest   *message);
size_t vent_request__pack
                     (const VentRequest   *message,
                      uint8_t             *out);
size_t vent_request__pack_to_buffer
                     (const VentRequest   *message,
                      ProtobufCBuffer     *buffer);
VentRequest *
       vent_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vent_request__free_unpacked
                     (VentRequest *message,
                      ProtobufCAllocator *allocator);
/* VentResponse methods */
void   vent_response__init
                     (VentResponse         *message);
size_t vent_response__get_packed_size
                     (const VentResponse   *message);
size_t vent_response__pack
                     (const VentResponse   *message,
                      uint8_t             *out);
size_t vent_response__pack_to_buffer
                     (const VentResponse   *message,
                      ProtobufCBuffer     *buffer);
VentResponse *
       vent_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vent_response__free_unpacked
                     (VentResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DeviceInfo_Closure)
                 (const DeviceInfo *message,
                  void *closure_data);
typedef void (*FileData_Closure)
                 (const FileData *message,
                  void *closure_data);
typedef void (*VentData_Closure)
                 (const VentData *message,
                  void *closure_data);
typedef void (*VentRequest_Closure)
                 (const VentRequest *message,
                  void *closure_data);
typedef void (*VentResponse_Closure)
                 (const VentResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    transport__descriptor;
extern const ProtobufCEnumDescriptor    status__descriptor;
extern const ProtobufCEnumDescriptor    command__descriptor;
extern const ProtobufCMessageDescriptor device_info__descriptor;
extern const ProtobufCMessageDescriptor file_data__descriptor;
extern const ProtobufCMessageDescriptor vent_data__descriptor;
extern const ProtobufCMessageDescriptor vent_request__descriptor;
extern const ProtobufCMessageDescriptor vent_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_openvent_2eproto__INCLUDED */
